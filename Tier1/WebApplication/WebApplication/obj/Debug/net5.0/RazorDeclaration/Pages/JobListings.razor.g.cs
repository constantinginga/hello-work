// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace WebApplication.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\klavs\OneDrive - ViaUC\Semester3\SEP\code\Tier1\WebApplication\WebApplication\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\klavs\OneDrive - ViaUC\Semester3\SEP\code\Tier1\WebApplication\WebApplication\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\klavs\OneDrive - ViaUC\Semester3\SEP\code\Tier1\WebApplication\WebApplication\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\klavs\OneDrive - ViaUC\Semester3\SEP\code\Tier1\WebApplication\WebApplication\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\klavs\OneDrive - ViaUC\Semester3\SEP\code\Tier1\WebApplication\WebApplication\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\klavs\OneDrive - ViaUC\Semester3\SEP\code\Tier1\WebApplication\WebApplication\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\klavs\OneDrive - ViaUC\Semester3\SEP\code\Tier1\WebApplication\WebApplication\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\klavs\OneDrive - ViaUC\Semester3\SEP\code\Tier1\WebApplication\WebApplication\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\klavs\OneDrive - ViaUC\Semester3\SEP\code\Tier1\WebApplication\WebApplication\_Imports.razor"
using WebApplication;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\klavs\OneDrive - ViaUC\Semester3\SEP\code\Tier1\WebApplication\WebApplication\_Imports.razor"
using WebApplication.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\klavs\OneDrive - ViaUC\Semester3\SEP\code\Tier1\WebApplication\WebApplication\Pages\JobListings.razor"
using WebApplication.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\klavs\OneDrive - ViaUC\Semester3\SEP\code\Tier1\WebApplication\WebApplication\Pages\JobListings.razor"
using WebApplication.Data;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/job-listings")]
    public partial class JobListings : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 126 "C:\Users\klavs\OneDrive - ViaUC\Semester3\SEP\code\Tier1\WebApplication\WebApplication\Pages\JobListings.razor"
       
    private IList<JobListing> jobListings;
    private IList<JobListing> jobListingToShow;
    private IList<JobListing> filteredJobs;
    private IList<JobListing> filteredByExperience;

    protected override async Task OnInitializedAsync()
    {
        jobListings = await JobListingData.GetJobListings();
        jobListingToShow = jobListings;
        filteredJobs = new List<JobListing>();
        filteredByExperience = new List<JobListing>();
        StateHasChanged();
    }

    private void FilterBySchedule(ChangeEventArgs arg, string schedule)
    {

        if ((bool)arg.Value)
        {
            foreach (var jl in jobListings)
            {
                if (jl.JobType.Equals(schedule)) filteredJobs.Add(jl);
            }

            jobListingToShow = (filteredByExperience.Any()) ? filteredJobs.Intersect(filteredByExperience).ToList() : filteredJobs;
            StateHasChanged();
        }
        else
        {
            if (filteredJobs.Count != 0)
            {
                foreach (var jl in filteredJobs.ToList())
                {
                    if (jl.JobType.Equals(schedule)) filteredJobs.Remove(jl);
                }
            }

            if (!filteredByExperience.Any() && !filteredJobs.Any())
            {
                jobListingToShow = jobListings;
            }
            else if (filteredJobs.Any() && !filteredByExperience.Any())
            {
                jobListingToShow = filteredJobs;
            }
            else if (filteredByExperience.Any() && !filteredJobs.Any())
            {
                jobListingToShow = filteredByExperience;
            }
            else
            {
                jobListingToShow = filteredJobs.Intersect(filteredByExperience).ToList();
            }
            StateHasChanged();
        }
    }

    private void FilterByExperience(ChangeEventArgs arg, int[] exp)
    {
        if ((bool)arg.Value)
        {
            foreach (var jl in jobListings)
            {
                if (jl.ExperienceLevel <= exp[1] && jl.ExperienceLevel > exp[0]) filteredByExperience.Add(jl);
            }

            jobListingToShow = (filteredJobs.Any()) ? filteredByExperience.Intersect(filteredJobs).ToList() : filteredByExperience;
            StateHasChanged();

        }
        else
        {
            if (filteredByExperience.Count() != 0)
            {
                foreach (var jl in filteredByExperience.ToList())
                {
                    if (jl.ExperienceLevel <= exp[1] && jl.ExperienceLevel > exp[0]) filteredByExperience.Remove(jl);
                }
            }

            if (!filteredByExperience.Any() && !filteredJobs.Any())
            {
                jobListingToShow = jobListings;
            }
            else if (filteredJobs.Any() && !filteredByExperience.Any())
            {
                jobListingToShow = filteredJobs;
            }
            else if (filteredByExperience.Any() && !filteredJobs.Any())
            {
                jobListingToShow = filteredByExperience;
            }
            else
            {
                jobListingToShow = filteredJobs.Intersect(filteredByExperience).ToList();
            }
            StateHasChanged();
        }
    }

    private void Apply(int id)
    {
        NavigationManager.NavigateTo($"apply/{id}");
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJobListingData JobListingData { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
