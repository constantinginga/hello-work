@page "/apply/{Id:int}"
@using WebApplication.Data
@using WebApplication.Models
@using WebApplication.Data.Applications
@using WebApplication.Auth

@inject IJobListingData JobListingData
@inject IApplicationData ApplicationData
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<div class="flex justify-center w-full pt-2">
    <div class="lg:w-6/12 details rounded-lg">

        @if (jobListing != null)
        {
            <div class="rounded-lg font-bold text-xl">Applying to @jobListing.JobTitle</div>
        }

        @if (jobListing == null)
        {
            <p>Job listing not found!</p>
        }
        else
        {
            <EditForm Model="application" OnValidSubmit="@Save">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="form-group">
                    <p class="font-bold mt-4">Application details:</p>
                    <InputTextArea class="w-full p-2" placeholder="Your text for application" @bind-Value="application.Details"/>
                    <InputTextArea class="hidden" placeholder="Your text for application" @bind-Value="application.employerEmail"/>
                    <InputTextArea class="hidden" placeholder="Your text for application" @bind-Value="application.employeEmail"/>
                    <InputNumber class="hidden" placeholder="Your text for application" @bind-Value="application.Status"/>
                </div>
                <div class="w-full p-2">
                    <table>
                        @if (files.Count != 0)
                        {
                            <tr>
                                <th class="px-2">Added files</th>
                                <th class="px-2">Remove</th>
                            </tr>
                        }
                        @foreach (var file in files)
                        {
                            <tr>
                                <td class="whitespace-nowrap px-2">@file.Key</td>
                                <td>
                                    <i @onclick="@(() => RemovePdf(file.Key))" class="trashcan oi oi-trash px-2" style="color: lightgray">
                                    </i>

                                </td>
                            </tr>
                        }

                    </table>
                    <p class="font-bold mt-4">Add pdf file to application (CV, Resume, Motivation Letter, etc.):</p>

                    <InputFile accept="application/pdf" OnChange="SelectedFile">Upload pdf</InputFile>

                </div>
                <button class="rounded-lg btn" style="background-color: #3f6cdf" type="submit" value="Save">Apply</button>
                <button class="rounded-lg btn bg-red-600" @onclick="Back">Back</button>
            </EditForm>
        }

    </div>
</div>

@code {

    [Parameter]
    public int Id { get; set; }

    private Application application = new();
    private JobListing jobListing;
    private string fileName;
    private Byte[] buffers;
    private Dictionary<string, Byte[]> files;

    protected override async Task OnInitializedAsync()
    {
        jobListing = await JobListingData.GetJobListing(Id);
        User user = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).cachedUser;
        application.Name = jobListing.JobTitle;
        application.employeEmail = user.Email;
        application.employerEmail = jobListing.Email;
        application.JobId = jobListing.JobId;
        Random random = new Random();
        application.Id = random.Next();
        application.Status = 0;
        application.Files = new List<string>();
        files = new Dictionary<string, byte[]>();
    }

    private void Back()
    {
        NavigationManager.NavigateTo("/job-listings");
    }

    private void Save()
    {
        foreach (var file in files)
        {
            ApplicationData.UploadFile(application.Id, file.Key,application.AddFile(file.Key, file.Value));
        }
        ApplicationData.AddApplication(application);
        NavigationManager.NavigateTo("/job-listings");
    }

    private async void SelectedFile(InputFileChangeEventArgs obj)
    {
        IBrowserFile imgFile = obj.File;
        fileName = obj.File.Name;
        fileName = fileName.Replace(".pdf", "");
        buffers = new byte[imgFile.Size];
        await imgFile.OpenReadStream(10000000).ReadAsync(buffers);
        files[fileName] = buffers;
        StateHasChanged();
    }

    private void RemovePdf(string fileKey)
    {
        files.Remove(fileKey);
        StateHasChanged();
    }

}