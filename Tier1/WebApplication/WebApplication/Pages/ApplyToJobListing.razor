@page "/apply/{Id:int}"
@using WebApplication.Data
@using WebApplication.Models
@using WebApplication.Data.Applications

@inject IJobListingData JobListingData
@inject IApplicationData ApplicationData 
@inject NavigationManager NavigationManager

<div class="w-full">
    <div style="background-color: #fafafa" class="rounded-lg flex flex-col justify-center p-3">
        @if (jobListing != null)
        {
            <div class="rounded-lg font-bold text-xl">Applying for position: @jobListing.Details</div>
        }

        @if (jobListing == null)
        {
            <p>Job listing not found!</p>
        }
        else
        {
            <EditForm Model="application" OnValidSubmit="@Save">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="form-group">
                    <p class="font-bold mt-4">Application details:</p>
                    <InputTextArea class="w-1/3" placeholder="Your text for application" @bind-Value="application.Details"/>
                </div>
                <button class="rounded-lg btn" style="background-color: #3f6cdf" type="submit" value="Save">Apply</button>
                <button class="rounded-lg btn bg-red-600" @onclick="Back">Back</button>

            </EditForm>
        }

    </div>
</div>
@code {
    [Parameter]
    public int Id { get; set; }

    private Application application;
    private JobListing jobListing;

    protected override async Task OnInitializedAsync()
    {
        jobListing = await JobListingData.Get(Id);
        application = new();
        application.JobId = jobListing.JobId;
        
    }

    private void Back()
    {
        NavigationManager.NavigateTo("/job-listings");
    }

    private void Save()
    {
        
        ApplicationData.AddApplication(application);
        NavigationManager.NavigateTo("/job-listings");
    }
}
